#include <iostream>
#include <string>
#include <ctime>


using namespace std;
namespace hash
{
	class Hash
	{
		string hash;

		int receivingExistCodes(int x);

		int getControlSum(string str);

	public:
		string getHash(string userString, unsigned int lenghtHash);
	};

	int Hash::receivingExistCodes(int x)
	{
		
		while (!(((x <= 57) && (x >= 48)) || ((x <= 90) && (x >= 65)) || ((x <= 122) && (x >= 97)))) {
			if (x < 48) { x += 24; }
			else { x -= 47; };
		}
		return x;
	}

	int Hash::getControlSum(string str)
	{
		unsigned int sault = 0, strlen = 0;
		for (; strlen < str.size(); strlen++)
			sault += int(str[strlen]);

		return sault;
	}

	string Hash::getHash(string userString, unsigned int lenghtHash)
	{
		if (lenghtHash > 3)
		{
			//минимальная длина строки хеша кратная 2
			unsigned int minLen = 2;
			//длина строки ближайшая к нужной длине хеша
			unsigned int realMinLen = 0;

			//соль - 1
			unsigned int originalSault = this->getControlSum(userString);
			unsigned int originalLenghtStr = (userString.size());
			
			while (minLen <= lenghtHash)
				realMinLen = (minLen *= 2);

			while (minLen < originalLenghtStr)
				minLen *= 2;

			if ((minLen - originalLenghtStr) < minLen)
				minLen *= 2;
			// кол-во символов необходимо добавить
			int addCount = minLen - originalLenghtStr;
			//добавление (первичный макс хеш)
			for (int i = 0; i < addCount; i++)
				userString += this->receivingExistCodes(userString[i] + userString[i + 1]);

			int maxSault = this->getControlSum(userString);
			int maxLenghtStr = (userString.size());
			// определение степени сжатия (и собственно сжатие)
			while (userString.size() != realMinLen)
			{
				for (int i = 0, center = userString.size() / 2; i < center; i++)
					this->hash += this->receivingExistCodes(userString[center - i] + userString[center + i]);
				
				userString = this->hash;
				this->hash.clear();
			}
			//приведение к заданной длине
			unsigned int rem = realMinLen - lenghtHash;

			for (unsigned int i = 0, countCompress = realMinLen / rem; this->hash.size() < (lenghtHash - 4); i++)
			{
				if (i % countCompress == 0)
					this->hash += this->receivingExistCodes(userString[i] + userString[++i]);
				else
					this->hash += userString[i];
			}
			//соль из оригинальной
			this->hash += this->receivingExistCodes(originalSault);
			this->hash += this->receivingExistCodes(originalLenghtStr);
			//соль из максимальной
			this->hash += this->receivingExistCodes(maxSault);
			this->hash += this->receivingExistCodes(maxLenghtStr);

			return this->hash;
		}
		return "";
	}


	class Test
	{
	private:
		int countInearation;

		int receivingExistCodes(int x);

		string generationString();

	public:
		Test(int countInearation) : countInearation(countInearation)
		{
			srand((int)time(NULL));
		}
		void GoTestRandom(int lenghtTemp);
	};

	int Test::receivingExistCodes(int x)
	{
		x += 256;
		while (!(((x <= 57) && (x >= 48)) || ((x <= 90) && (x >= 65)) || ((x <= 122) && (x >= 97)))) {
			if (x < 48) { x += 24; }
			else { x -= 47; };
		}
		return x;
	}

	string Test::generationString()
	{
		string str;
		string chars = "1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNMйцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
		int lenghtString = rand() % 23 + 5;
		
		for (int i = 0; i < lenghtString; i++)
		{
			str += this->receivingExistCodes(int(chars[rand() % chars.size() + 0]));
		}
		// cout << str << endl;
		return str;
	}

	void Test::GoTestRandom(int lenghtTemp)
	{
		int counterCoints = 0;

		string stringTemp;
		string resultTemp;

		string* arrayString = new string[this->countInearation];
		string* arrayHash = new string[this->countInearation];

		for (int i = 0; i < this->countInearation; i++)
		{
			stringTemp = this->generationString();

			Hash hash;
			resultTemp = hash.getHash(stringTemp, lenghtTemp);

			/*cout << "string: " << stringTemp << endl;
			cout << " LenghtHash: " << lenghtTemp << endl;
			cout << "Hash: " << resultTemp << endl;*/

			arrayString[i] = stringTemp;
			arrayHash[i] = resultTemp;
		}

		for (int i = 0; i < this->countInearation; i++)
		{
			for (int j = 0; j < this->countInearation; j++)
			{
				if (i == j)
					continue;

				if (arrayHash[i] == arrayHash[j]) {
					if (arrayString[i] != arrayString[j])
					{

						cout << "Collision! (I): "
							<< i << " " << arrayHash[i] << " (" << arrayString[i] << ") "
							<< " (J): " << j << " " << arrayHash[j] << " (" << arrayString[j] << ") " << endl;

						counterCoints++;
					}
				}
			}
		}
		cout << "Cout collision: " << counterCoints / 2 << " / " << this->countInearation << endl;
		arrayString->clear();
		arrayHash->clear();
	}

}


using namespace hash;

int main() {

	Hash hash;

	string str;
	int len;

	/*cin >> str >> len;
	cout << hash.getHash(str, len) << endl;
	*/

	Test test(10000);
	test.GoTestRandom(6);


	return 0;
} 